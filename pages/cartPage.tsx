import Head from 'next/head'
import Image from 'next/image'
import IntroMenu from '../components/introMenu'
import styles from '../styles/CheckoutPage.module.css'
import { RxCross2 } from 'react-icons/rx'
import { IconContext } from 'react-icons'
import { useState, useContext, useEffect } from 'react'
import { ThreeDots } from 'react-loader-spinner'
import { useRouter } from 'next/router'

export async function getStaticProps() {
  const res = await fetch('http://159.223.77.56/products');
  const productsJson = await res.json();
  // console.log(productsJson);
  return {
    props: {
      products: productsJson
    }
  };
}

export default function CartPage({ cart, setCart, products }: any) {
  let parsedCart: { _id: string, price: number, name: string, details: string, picLink: string, quantity: number }[] = []
  useEffect(() => {
    const localParsedCart = cart.map((cartElem: any) => {
      const productDetails = products.filter((productsElem: any) => cartElem.productId === productsElem._id)[0]
      return { quantity: cartElem.quantity, ...productDetails }
    })
    parsedCart = localParsedCart
  }, [cart])

  const modifyQuantity = (product: { productId: string, quantity: number }, newQuantity: number) => {
    const targetIndex = cart.map((e: any) => e.productId).indexOf(product.productId)
    const newCart = [...cart]
    newCart[targetIndex] = { productId: product.productId, quantity: newQuantity }
    setCart([...newCart])
  }

  const removeFromCart = (productId: string) => {
    const newCart = cart.filter((e: any) => e.productId !== productId)
    setCart([...newCart])
  }

  const [name, setName] = useState('')
  const [address, setAddress] = useState('')
  const [email, setEmail] = useState('')
  const [phone, setPhone] = useState('')

  const [isSubmitted, setIsSubmitted] = useState(false)

  const router = useRouter()

  const submitOrder = () => {
    const data = {
      "customerName": name,
      "address": address,
      "email": email,
      "phone": phone,
      "orderDetails": cart
    } 

    console.log(JSON.stringify(data))

    fetch('http://159.223.77.56/orders', { 
      method: 'POST', 
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data)
    }).then(() => {
      setIsSubmitted(false)
      console.log('success')
      router.push({ pathname: '/paymentPage', query: { total: (parsedCart.reduce((accumulator, currentVal) => accumulator + (currentVal.price * currentVal.quantity), 0)).toFixed(2) }})
    }).catch((err) => {
      setIsSubmitted(false)
      console.log('An error occurred')
      console.log(err)
    })
  }

  const renderCartProducts = () => {
    const localParsedCart = cart.map((cartElem: any) => {
      const productDetails = products.filter((productsElem: any) => cartElem.productId === productsElem._id)[0]
      return { quantity: cartElem.quantity, ...productDetails }
    })
    parsedCart = localParsedCart

    return localParsedCart.map((product: any) => (
      <div className={styles.cartProduct}>
        <Image src={product.picLink} alt='thumbnail' width={100} height={100} className={styles.thumbnail} />
        <div className={styles.productNameContainer}>
          <h2 className={styles.productName}>{product.name}</h2>
        </div>
        {/* <input type="number" defaultValue={product.quantity} onChange={(e) => modifyQuantity({ productId: product.productId, quantity:product.quantity }, parseInt(e.target.value))} /> */}
        <div className={styles.priceQuantityBox}>
          <p className={styles.productQuantity}>x{product.quantity}</p>
          <p>${(product.price * product.quantity).toFixed(2)}</p>
        </div>
        <IconContext.Provider value={{ className: styles.deleteButton, size: '1.5rem' }}>
          <RxCross2 onClick={() => removeFromCart(product._id)}/>
        </IconContext.Provider>
      </div>
    ))
  }


  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <IntroMenu />

        <div className={styles.section}>
          <h1>Your Cart</h1>
          {renderCartProducts()}
          {cart.length > 0 && <div className={styles.subtotalContainer}>
            <h2>Subtotal</h2>
            <h2>${(parsedCart.reduce((accumulator, currentVal) => accumulator + (currentVal.price * currentVal.quantity), 0)).toFixed(2)}</h2>
          </div>}
          {cart.length > 0 && (
            <div className={styles.customerInfo}>
              <label className={styles.label}>Name</label>
              <input className={styles.input} type='text' value={name} onChange={e => setName(e.target.value)}></input>

              <label className={styles.label}>Address</label>
              <input className={styles.input} type='text' value={address} onChange={e => setAddress(e.target.value)}></input>

              <label className={styles.label}>Email</label>
              <input className={styles.input} type='email' value={email} onChange={e => setEmail(e.target.value)}></input>

              <label className={styles.label}>Phone Number</label>
              <input className={styles.input} type='tel' value={phone} onChange={e => setPhone(e.target.value)}></input>
            </div>
          )}
          {cart.length > 0 ? <button className={styles.submitButton} onClick={submitOrder} disabled={isSubmitted}>
            {isSubmitted ? <ThreeDots 
              height="20" 
              width="20" 
              radius="9"
              color="#ffffff" 
              ariaLabel="three-dots-loading"
              wrapperStyle={{}}
              visible={true}
              /> : 'Submit my order!'}
          </button> : <p>There are currently no items in your cart</p>}
        </div>
      </main>
      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
